# Generated by Django 5.2.5 on 2025-08-14 18:35

import django.db.models.deletion
import utilities.global_functions
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Account',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('id', models.BigAutoField(primary_key=True, serialize=False, unique=True)),
                ('reference_id', models.CharField(db_index=True, default=utilities.global_functions.generate_uuid, editable=False, help_text='Unique identifier for external reference', max_length=32, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('is_active', models.BooleanField(db_index=True, default=True, help_text='Status to check if the entity is active')),
                ('remarks', models.CharField(blank=True, max_length=300, null=True)),
                ('username', models.CharField(help_text='Required. 50 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=50, unique=True)),
                ('email', models.EmailField(blank=True, help_text='Optional email address. Must be unique if provided.', max_length=254, null=True, unique=True)),
                ('phone_number', models.CharField(help_text='Required. 10-digit phone number.', max_length=10, unique=True)),
                ('address', models.CharField(blank=True, help_text='Address of the user (e.g., Tilottama-3, Yogikuti, Shantichowk, near futsal Brahmapath)', max_length=255)),
                ('is_staff', models.BooleanField(default=False)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL)),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'accounts',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Menu',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False, unique=True)),
                ('reference_id', models.CharField(db_index=True, default=utilities.global_functions.generate_uuid, editable=False, help_text='Unique identifier for external reference', max_length=32, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('is_active', models.BooleanField(db_index=True, default=True, help_text='Status to check if the entity is active')),
                ('remarks', models.CharField(blank=True, max_length=300, null=True)),
                ('menu_name', models.CharField(help_text='Display name of the menu', max_length=200)),
                ('menu_url', models.CharField(help_text='URL to access the menu', max_length=200)),
                ('create_url', models.CharField(blank=True, help_text='URL for creating a new item', max_length=200, null=True)),
                ('list_url', models.CharField(blank=True, help_text='URL to list all items', max_length=200, null=True)),
                ('icon', models.CharField(blank=True, help_text='Icon class or path', max_length=100, null=True)),
                ('visibility', models.BooleanField(default=True, help_text='Whether this menu is visible')),
                ('display_order', models.IntegerField(default=0, help_text='Order to display menus')),
                ('depth', models.PositiveIntegerField(default=0, help_text='Depth level of the menu for nested menus')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL)),
                ('parent', models.ForeignKey(blank=True, help_text='Parent menu item, if this is a sub-menu', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='children', to='accounts.menu')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Menu',
                'verbose_name_plural': 'Menus',
                'db_table': 'menus',
                'ordering': ['display_order', 'menu_name'],
            },
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False, unique=True)),
                ('reference_id', models.CharField(db_index=True, default=utilities.global_functions.generate_uuid, editable=False, help_text='Unique identifier for external reference', max_length=32, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('is_active', models.BooleanField(db_index=True, default=True, help_text='Status to check if the entity is active')),
                ('remarks', models.CharField(blank=True, max_length=300, null=True)),
                ('name', models.CharField(help_text='The name of the role', max_length=150, unique=True, verbose_name='name')),
                ('is_predefined', models.BooleanField(default=False, help_text='Whether this role is predefined by the system')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Role',
                'verbose_name_plural': 'Roles',
                'db_table': 'roles',
                'ordering': ['name'],
            },
        ),
        migrations.AddField(
            model_name='account',
            name='role',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='accounts', to='accounts.role'),
        ),
        migrations.CreateModel(
            name='RoleMenuPermission',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False, unique=True)),
                ('reference_id', models.CharField(db_index=True, default=utilities.global_functions.generate_uuid, editable=False, help_text='Unique identifier for external reference', max_length=32, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('is_active', models.BooleanField(db_index=True, default=True, help_text='Status to check if the entity is active')),
                ('remarks', models.CharField(blank=True, max_length=300, null=True)),
                ('can_create', models.BooleanField(default=False, help_text='Whether the role can create items in this menu')),
                ('can_view', models.BooleanField(default=False, help_text='Whether the role can view this menu')),
                ('can_update', models.BooleanField(default=False, help_text='Whether the role can update items in this menu')),
                ('can_delete', models.BooleanField(default=False, help_text='Whether the role can delete items in this menu')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL)),
                ('menu', models.ForeignKey(help_text='Menu for which the role has permissions', on_delete=django.db.models.deletion.PROTECT, related_name='role_permissions', to='accounts.menu')),
                ('role', models.ForeignKey(help_text='Role assigned to this permission', on_delete=django.db.models.deletion.PROTECT, related_name='menu_permissions', to='accounts.role')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Role Menu Permission',
                'verbose_name_plural': 'Role Menu Permissions',
                'db_table': 'role_menu_permission',
                'ordering': ['role_id', 'menu_id'],
            },
        ),
        migrations.AddIndex(
            model_name='role',
            index=models.Index(fields=['name'], name='roles_name_a96913_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='rolemenupermission',
            unique_together={('role', 'menu')},
        ),
    ]
